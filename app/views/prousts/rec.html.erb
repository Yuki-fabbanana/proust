<h1>Web Audio APIのサンプル</h1>
<p>実行と同時に録音がはじまり、10秒後に音声データを生成します</p>
<input type="button" id="recBtn" value="Rec" onClick="startRec();" style="display:block;"/>
<div id="target"></div>
<div id="map"></div>
<div id="address"></div>
<script>

    let audio_sample_rate = null;
    let scriptProcessor = null;
    let audioContext = null;

    // audio data
    let audioData = [];
    let bufferSize = 1024;


    let saveAudio = function () {

      var blob = exportWAV(audioData);

        var fd = new FormData();
        fd.append('file', blob, (new Date()).getTime() + ".wav");

        $.ajax({
          url:'http://localhost:3000/prousts/convert',
          type:'POST',
          data:fd,
          contentType: false,
          processData: false,
        })
        // Ajaxリクエストが成功した時発動
        .done( (data) => {
          console.log(data);

          // var release_date = data.result.spotify.release_date;
          // var = data.result.spotify.album;
          // var = data.result.spotify.album;
          // var = data.result.spotify.album;
          // var = data.result.spotify.album;
          initMap(data);
          alert("A");
        })
        // Ajaxリクエストが失敗した時発動
        .fail( (data) => {
            alert("B");
        })
        // Ajaxリクエストが成功・失敗どちらでも発動
        .always( (data) => {

        });

    }

    let exportWAV = function (audioData) {

      let encodeWAV = function (samples, sampleRate) {
        let buffer = new ArrayBuffer(44 + samples.length * 2);
        let view = new DataView(buffer);

        let writeString = function (view, offset, string) {
          for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
          }
        };

        let floatTo16BitPCM = function (output, offset, input) {
          for (let i = 0; i < input.length; i++ , offset += 2) {
            let s = Math.max(-1, Math.min(1, input[i]));
            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
          }
        };

        writeString(view, 0, 'RIFF');  // RIFFヘッダ
        view.setUint32(4, 32 + samples.length * 2, true); // これ以降のファイルサイズ
        writeString(view, 8, 'WAVE'); // WAVEヘッダ
        writeString(view, 12, 'fmt '); // fmtチャンク
        view.setUint32(16, 16, true); // fmtチャンクのバイト数
        view.setUint16(20, 1, true); // フォーマットID
        view.setUint16(22, 1, true); // チャンネル数
        view.setUint32(24, sampleRate, true); // サンプリングレート
        view.setUint32(28, sampleRate * 2, true); // データ速度
        view.setUint16(32, 2, true); // ブロックサイズ
        view.setUint16(34, 16, true); // サンプルあたりのビット数
        writeString(view, 36, 'data'); // dataチャンク
        view.setUint32(40, samples.length * 2, true); // 波形データのバイト数
        floatTo16BitPCM(view, 44, samples); // 波形データ

        return view;
      };

      let mergeBuffers = function (audioData) {
        let sampleLength = 0;
        for (let i = 0; i < audioData.length; i++) {
          sampleLength += audioData[i].length;
        }
        let samples = new Float32Array(sampleLength);
        let sampleIdx = 0;
        for (let i = 0; i < audioData.length; i++) {
          for (let j = 0; j < audioData[i].length; j++) {
            samples[sampleIdx] = audioData[i][j];
            sampleIdx++;
          }
        }
        return samples;
      };

      let dataview = encodeWAV(mergeBuffers(audioData), audio_sample_rate);
      let audioBlob = new Blob([dataview], { type: 'audio/wav' });

      return audioBlob;
    };

    // save audio data
    var onAudioProcess = function (e) {
      var input = e.inputBuffer.getChannelData(0);
      var bufferData = new Float32Array(bufferSize);
      for (var i = 0; i < bufferSize; i++) {
        bufferData[i] = input[i];
      }

      audioData.push(bufferData);
    };

    // getusermedia
    let handleSuccess = function (stream) {
      audioContext = new AudioContext();
      audio_sample_rate = audioContext.sampleRate;
      scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);
      var mediastreamsource = audioContext.createMediaStreamSource(stream);
      mediastreamsource.connect(scriptProcessor);
      scriptProcessor.onaudioprocess = onAudioProcess;
      scriptProcessor.connect(audioContext.destination);

      setTimeout(function () {
        saveAudio();
      }, 5000);
    };

    // getUserMedia
    recを押したら処理が走る
    function startRec(){
      navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(handleSuccess);
    }


//////////////////google map API///////////////////////////////////////////////
    function initMap(data) {
        var songs_title = data.result.title;
        var album = data.result.album;
        var artist = data.result.apple_music.artistName;
        'use strict';
        if( navigator.geolocation ){// 現在位置を取得できる場合の処理
        // 現在位置を取得する
          navigator.geolocation.getCurrentPosition(success, error, option);
          /*現在位置が取得できた時に実行*/
          function success(position){
            var data = position.coords;
            // 必要な緯度経度だけ取得
            var lat = data.latitude;
            var lng = data.longitude;
            //Google Mapsで住所を取得
            var geocoder = new google.maps.Geocoder();
            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode({'latLng': latlng}, function(results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                // document.getElementById('address').innerHTML = results[0].formatted_address;
                window.location.href = `http://localhost:3000/prousts/new?address=${results[0].formatted_address}&latitude=${lat}&longitude=${lng}&songs_title=${songs_title}&album=${album}&artist=${artist}`;
                }
              else {
                alert("エラー" + status);
              }
            });
          }
        /*現在位置の取得に失敗した時に実行*/
        function error(error){
            var errorMessage = {
            0: "原因不明のエラーが発生しました。",
            1: "位置情報が許可されませんでした。",
            2: "位置情報が取得できませんでした。",
            3: "タイムアウトしました。",
            } ;
            //とりあえずalert
            alert( errorMessage[error.code]);
          }
          // オプション(省略可)
          var option = {
            "enableHighAccuracy": false,
            "timeout": 100 ,
            "maximumAge": 100 ,
          } ;
        } else {// 現在位置を取得できない場合の処理
        //とりあえずalert
          alert("あなたの端末では、現在位置を取得できません。");
        }
    }

/////////////////////////////////////////////////////////////////////////////////////

  </script>
  <script src="https://maps.googleapis.com/maps/api/js?language=ja&region=JP&key=#{TODO}&callback=initMap"
async defer>
  </script>
